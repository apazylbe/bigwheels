name: CI checks

on:
  pull_request:

# Cancel previous runs if a more recent commit is pushed.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

permissions: read-all

jobs:
  clang-format-check:
    name: clang-format
    runs-on: "ubuntu-20.04"
    steps:
      - name: Setup clang-format
        run: |
          sudo apt-get install -yqq clang-format-12
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Switch to pull request branch
        run: |
          git checkout ${GITHUB_SHA}
      - name: Run clang-format
        run: |
          git diff origin/${{ github.base_ref }} -U0 --no-color -- '**/*.cpp' '**/*.cc' '**/*.h' '**/*.hh' '**/*.hpp' \
            | clang-format-diff-12 -p1 >not-formatted.diff 2>&1
      - name: Check formatting
        run: |
          if ! grep -q '[^[:space:]]' not-formatted.diff ; then
            echo "Code is formatted."
          else
            echo "Code is not formatted."
            echo "Run clang-format-diff on your changes:"
            echo "    git diff origin/${{ github.base_ref }} -U0 --no-color | clang-format-diff -p1 -i"
            echo ""
            echo "You can disable clang-format for specific code blocks. Follow https://clang.llvm.org/docs/ClangFormatStyleOptions.html#disabling-formatting-on-a-piece-of-code."
            echo ""
            echo "Diff:"
            cat not-formatted.diff
            echo ""
            exit 3
          fi
  linux-build:
    name: Build and run tests on Linux
    runs-on: "ubuntu-20.04"
    steps:
      - name: Setup necessary packages
        run: |
          sudo apt install libxrandr-dev libxinerama-dev libx11-dev libxcursor-dev libxi-dev libx11-xcb-dev clang \
          mesa-vulkan-drivers
      - name: Setup Vulkan SDK
        run: |
          wget -q https://sdk.lunarg.com/sdk/download/1.3.216.0/linux/vulkansdk-linux-x86_64-1.3.216.0.tar.gz
          mkdir "${HOME}/vulkan-sdk"
          tar -xf vulkansdk-linux-x86_64-1.3.216.0.tar.gz -C "${HOME}/vulkan-sdk"
          echo "VULKAN_SDK=${HOME}/vulkan-sdk/1.3.216.0/x86_64" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Switch to pull request branch and clone submodules
        run: |
          git checkout ${GITHUB_SHA}
          git submodule update --init --recursive
      - name: Build
        run: |
          mkdir build
          cd build
          # -DBUILD_TESTS=OFF only disables the OpenXR tests
          cmake .. -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DPPX_BUILD_TESTS=ON -DPPX_BUILD_XR=1 -DBUILD_TESTS=OFF
          make -j $(nproc)
      - name: Run unit tests
        run: |
          cd build
          ctest -j $(nproc)
      - name: Run runtime tests
        run: |
          cd build/bin

          xvfb-run -a ./vk_03_square_textured --frame-count 2 --screenshot-frame-number 1
          convert screenshot_frame1.ppm vk_03_square_textured_screenshot.png

          xvfb-run -a ./vk_09_obj_geometry --frame-count 2 --screenshot-frame-number 1
          convert screenshot_frame1.ppm vk_09_obj_geometry_screenshot.png

          xvfb-run -a ./vk_13_normal_map --frame-count 2 --screenshot-frame-number 1
          convert screenshot_frame1.ppm vk_13_normal_map_screenshot.png

          xvfb-run -a ./vk_fishtornado --frame-count 2 --screenshot-frame-number 1
          convert screenshot_frame1.ppm vk_fishtornado_screenshot.png
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: build/bin/*.png
  windows-build:
    name: Build and run unit tests on Windows
    runs-on: "windows-2022"
    steps:
      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
        with:
          sdk-version: 22621
      - name: Setup Vulkan SDK
        run: |
          Start-BitsTransfer -Source https://sdk.lunarg.com/sdk/download/1.3.216.0/windows/VulkanSDK-1.3.216.0-Installer.exe
          .\VulkanSDK-1.3.216.0-Installer.exe install --accept-licenses --default-answer --confirm-command --root "$HOME\vulkan-sdk"
          "VULKAN_SDK=${HOME}\vulkan-sdk" >> $env:GITHUB_ENV

          # Get the vulkan-1.dll and add it to the PATH, which is required when we execute binaries.
          Start-BitsTransfer -Source https://sdk.lunarg.com/sdk/download/1.3.216.0/windows/VulkanRT-1.3.216.0-Components.zip
          Expand-Archive VulkanRT-1.3.216.0-Components.zip -DestinationPath "$HOME\vulkan-sdk\RTComponents"
          "$HOME\vulkan-sdk\RTComponents\VulkanRT-1.3.216.0-Components\x64" >> $env:GITHUB_PATH
      - name: Setup software renderer (WARP)
        run: |
          # We download the latest version of WARP instead of using the one provided by Windows
          # since it supports newer features and shader model 6.5, which we use for DX12.
          # See https://devblogs.microsoft.com/directx/announcing-warp-preview-with-shader-model-6-7-support/.
          Install-Package Microsoft.Direct3D.WARP -Source https://www.nuget.org/api/v2 -Destination "$HOME\warp" -RequiredVersion 1.0.5 -Force
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Switch to pull request branch and clone submodules
        run: |
          git checkout ${GITHUB_SHA}
          git submodule update --init --recursive
      - name: Build
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.22621.0 -DPPX_BUILD_TESTS=ON -DPPX_BUILD_XR=1 ..

          # We only build DX12 projects since there is no benefit in building
          # the targets for other APIs unless we're running them.
          # We also build all shaders targets, irrespective of the API, to
          # ensure shader compilation succeeds.

          # TODO(https://github.com/google/bigwheels/issues/97): an issue
          # around duplicated targets requires us to build shader targets
          # with a single core.
          cmake --build . --target all-shaders --config ReleaseWRONG -- /nologo /verbosity:minimal /maxcpucount:1
          cmake --build . --target all-dx12 build-tests --config Release -- /nologo /verbosity:minimal /maxcpucount
      - name: Run unit tests
        run: |
          cd build
          cmake --build . --target RUN_TESTS --config Release -- /nologo /verbosity:minimal /maxcpucount
      - name: Run runtime tests
        run: |
          cd build\bin\Release

          # Copy software renderer DLL. Note the DLL is called `d3d10` but
          # this is used for all DirectX versions.
          cp "$HOME\warp\Microsoft.Direct3D.WARP.1.0.5\build\native\amd64\d3d10warp.dll" .\

          .\dx12_03_square_textured --headless --frame-count 2 --screenshot-frame-number 1
          magick convert screenshot_frame1.ppm dx12_03_square_textured_screenshot.png

          .\dx12_09_obj_geometry --headless --frame-count 2 --screenshot-frame-number 1
          magick convert screenshot_frame1.ppm dx12_09_obj_geometry_screenshot.png

          .\dx12_13_normal_map --headless --frame-count 2 --screenshot-frame-number 1
          magick convert screenshot_frame1.ppm dx12_13_normal_map_screenshot.png

          .\dx12_fishtornado --headless --frame-count 2 --screenshot-frame-number 1
          magick convert screenshot_frame1.ppm dx12_fishtornado_screenshot.png
      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: build\bin\Release\*.png
  android-build:
    name: Check Android build with gradle
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Setup Vulkan SDK
        run: |
          wget -q https://sdk.lunarg.com/sdk/download/1.3.216.0/linux/vulkansdk-linux-x86_64-1.3.216.0.tar.gz
          mkdir "${HOME}/vulkan-sdk"
          tar -xf vulkansdk-linux-x86_64-1.3.216.0.tar.gz -C "${HOME}/vulkan-sdk"
          echo "VULKAN_SDK=${HOME}/vulkan-sdk/1.3.216.0/x86_64" >> $GITHUB_ENV
      - name: Build Cube sample for Android
        run: |
          ./gradlew assemble
